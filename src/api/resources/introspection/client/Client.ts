/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as errors from "../../../../errors";

export declare namespace Introspection {
    interface Options {
        environment: environments.VeniceEnvironment | string;
    }
}

export class Introspection {
    constructor(private readonly options: Introspection.Options) {}

    public async get(): Promise<void> {
        const _response = await core.fetcher({
            url: this.options.environment,
            method: "GET",
        });
        if (_response.ok) {
            return;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.VeniceError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.VeniceError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.VeniceTimeoutError();
            case "unknown":
                throw new errors.VeniceError({
                    message: _response.error.errorMessage,
                });
        }
    }
}
